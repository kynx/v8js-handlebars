[
	{
		"description": "helpers",
		"it": "helper with complex lookup$",
		"template": "{{#goodbyes}}{{{link ../prefix}}}{{/goodbyes}}",
		"data": {
			"prefix": "/root",
			"goodbyes": [
				{
					"text": "Goodbye",
					"url": "goodbye"
				}
			]
		},
		"expected": "<a href=\"/root/goodbye\">Goodbye</a>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (prefix) {\n      return '<a href=\"' + prefix + '/' + this.url + '\">' + this.text + '</a>';\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper for raw block gets raw content",
		"template": "{{{{raw}}}} {{test}} {{{{/raw}}}}",
		"data": {
			"test": "hello"
		},
		"expected": " {{test}} ",
		"helpers": {
			"raw": {
				"!code": true,
				"javascript": "function (options) {\n        return options.fn();\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper for raw block gets parameters",
		"template": "{{{{raw 1 2 3}}}} {{test}} {{{{/raw}}}}",
		"data": {
			"test": "hello"
		},
		"expected": " {{test}} 123",
		"helpers": {
			"raw": {
				"!code": true,
				"javascript": "function (a, b, c, options) {\n        return options.fn() + a + b + c;\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper for nested raw block gets raw content",
		"template": "{{{{a}}}} {{{{b}}}} {{{{/b}}}} {{{{/a}}}}",
		"data": {},
		"expected": " {{{{b}}}} {{{{/b}}}} ",
		"helpers": {
			"a": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn();\n      }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper block with identical context",
		"template": "{{#goodbyes}}{{name}}{{/goodbyes}}",
		"data": {
			"name": "Alan"
		},
		"expected": "Goodbye Alan! goodbye Alan! GOODBYE Alan! ",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n      var out = '';\n      var byes = ['Goodbye', 'goodbye', 'GOODBYE'];\n      for (var i = 0, j = byes.length; i < j; i++) {\n        out += byes[i] + ' ' + options.fn(this) + '! ';\n      }\n      return out;\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper block with complex lookup expression",
		"template": "{{#goodbyes}}{{../name}}{{/goodbyes}}",
		"data": {
			"name": "Alan"
		},
		"expected": "Goodbye Alan! goodbye Alan! GOODBYE Alan! ",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n      var out = '';\n      var byes = ['Goodbye', 'goodbye', 'GOODBYE'];\n      for (var i = 0, j = byes.length; i < j; i++) {\n        out += byes[i] + ' ' + options.fn({}) + '! ';\n      }\n      return out;\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper with complex lookup and nested template",
		"template": "{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}",
		"data": {
			"prefix": "/root",
			"goodbyes": [
				{
					"text": "Goodbye",
					"url": "goodbye"
				}
			]
		},
		"expected": "<a href=\"/root/goodbye\">Goodbye</a>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (prefix, options) {\n        return '<a href=\"' + prefix + '/' + this.url + '\">' + options.fn(this) + '</a>';\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper with complex lookup and nested template in VM+Compiler",
		"template": "{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}",
		"data": {
			"prefix": "/root",
			"goodbyes": [
				{
					"text": "Goodbye",
					"url": "goodbye"
				}
			]
		},
		"expected": "<a href=\"/root/goodbye\">Goodbye</a>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (prefix, options) {\n        return '<a href=\"' + prefix + '/' + this.url + '\">' + options.fn(this) + '</a>';\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper returning undefined value",
		"template": " {{nothere}}",
		"data": {},
		"expected": " ",
		"helpers": {
			"nothere": {
				"!code": true,
				"javascript": "function () {}"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "helper returning undefined value",
		"template": " {{#nothere}}{{/nothere}}",
		"data": {},
		"expected": " ",
		"helpers": {
			"nothere": {
				"!code": true,
				"javascript": "function () {}"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "block helper",
		"template": "{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!",
		"data": {
			"world": "world"
		},
		"expected": "GOODBYE! cruel world!",
		"message": "Block helper executed",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) { return options.fn({text: 'GOODBYE'}); }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "block helper staying in the same context",
		"template": "{{#form}}<p>{{name}}</p>{{/form}}",
		"data": {
			"name": "Yehuda"
		},
		"expected": "<form><p>Yehuda</p></form>",
		"message": "Block helper executed with current context",
		"helpers": {
			"form": {
				"!code": true,
				"javascript": "function (options) { return '<form>' + options.fn(this) + '</form>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "block helper should have context in this",
		"template": "<ul>{{#people}}<li>{{#link}}{{name}}{{/link}}</li>{{/people}}</ul>",
		"data": {
			"people": [
				{
					"name": "Alan",
					"id": 1
				},
				{
					"name": "Yehuda",
					"id": 2
				}
			]
		},
		"expected": "<ul><li><a href=\"/people/1\">Alan</a></li><li><a href=\"/people/2\">Yehuda</a></li></ul>",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function link(options) {\n      return '<a href=\"/people/' + this.id + '\">' + options.fn(this) + '</a>';\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "block helper for undefined value",
		"template": "{{#empty}}shouldn't render{{/empty}}",
		"data": {},
		"expected": "",
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "block helper passing a new context",
		"template": "{{#form yehuda}}<p>{{name}}</p>{{/form}}",
		"data": {
			"yehuda": {
				"name": "Yehuda"
			}
		},
		"expected": "<form><p>Yehuda</p></form>",
		"message": "Context variable resolved",
		"helpers": {
			"form": {
				"!code": true,
				"javascript": "function (context, options) { return '<form>' + options.fn(context) + '</form>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "block helper passing a complex path context",
		"template": "{{#form yehuda/cat}}<p>{{name}}</p>{{/form}}",
		"data": {
			"yehuda": {
				"name": "Yehuda",
				"cat": {
					"name": "Harold"
				}
			}
		},
		"expected": "<form><p>Harold</p></form>",
		"message": "Complex path variable resolved",
		"helpers": {
			"form": {
				"!code": true,
				"javascript": "function (context, options) { return '<form>' + options.fn(context) + '</form>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "nested block helpers",
		"template": "{{#form yehuda}}<p>{{name}}</p>{{#link}}Hello{{/link}}{{/form}}",
		"data": {
			"yehuda": {
				"name": "Yehuda"
			}
		},
		"expected": "<form><p>Yehuda</p><a href=\"Yehuda\">Hello</a></form>",
		"message": "Both blocks executed",
		"helpers": {
			"link": {
				"!code": true,
				"javascript": "function (options) { return '<a href=\"' + this.name + '\">' + options.fn(this) + '</a>'; }"
			},
			"form": {
				"!code": true,
				"javascript": "function (context, options) { return '<form>' + options.fn(context) + '</form>'; }"
			}
		}
	},
	{
		"description": "helpers",
		"it": "block helper inverted sections",
		"template": "{{#list people}}{{name}}{{^}}<em>Nobody's here</em>{{/list}}",
		"data": {
			"people": [
				{
					"name": "Alan"
				},
				{
					"name": "Yehuda"
				}
			]
		},
		"expected": "<ul><li>Alan</li><li>Yehuda</li></ul>",
		"helpers": {
			"list": {
				"!code": true,
				"javascript": "function list(context, options) {\n      if (context.length > 0) {\n        var out = '<ul>';\n        for (var i = 0, j = context.length; i < j; i++) {\n          out += '<li>';\n          out += options.fn(context[i]);\n          out += '</li>';\n        }\n        out += '</ul>';\n        return out;\n      } else {\n        return '<p>' + options.inverse(this) + '</p>';\n      }\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "block helper inverted sections",
		"template": "{{#list people}}{{name}}{{^}}<em>Nobody's here</em>{{/list}}",
		"data": {
			"people": []
		},
		"expected": "<p><em>Nobody's here</em></p>",
		"helpers": {
			"list": {
				"!code": true,
				"javascript": "function list(context, options) {\n      if (context.length > 0) {\n        var out = '<ul>';\n        for (var i = 0, j = context.length; i < j; i++) {\n          out += '<li>';\n          out += options.fn(context[i]);\n          out += '</li>';\n        }\n        out += '</ul>';\n        return out;\n      } else {\n        return '<p>' + options.inverse(this) + '</p>';\n      }\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "block helper inverted sections",
		"template": "{{#list people}}Hello{{^}}{{message}}{{/list}}",
		"data": {
			"people": [],
			"message": "Nobody's here"
		},
		"expected": "<p>Nobody&#x27;s here</p>",
		"helpers": {
			"list": {
				"!code": true,
				"javascript": "function list(context, options) {\n      if (context.length > 0) {\n        var out = '<ul>';\n        for (var i = 0, j = context.length; i < j; i++) {\n          out += '<li>';\n          out += options.fn(context[i]);\n          out += '</li>';\n        }\n        out += '</ul>';\n        return out;\n      } else {\n        return '<p>' + options.inverse(this) + '</p>';\n      }\n    }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "pathed lambas with parameters",
		"template": "{{./helper 1}}",
		"data": {
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'winning';\n      }"
			}
		},
		"expected": "winning",
		"helpers": {
			"./helper": {
				"!code": true,
				"javascript": "function () {\n        return 'fail';\n      }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers",
		"it": "pathed lambas with parameters",
		"template": "{{hash/helper 1}}",
		"data": {
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'winning';\n      }"
			}
		},
		"expected": "winning",
		"helpers": {
			"./helper": {
				"!code": true,
				"javascript": "function () {\n        return 'fail';\n      }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers hash",
		"it": "providing a helpers hash",
		"template": "Goodbye {{cruel}} {{world}}!",
		"data": {
			"cruel": "cruel"
		},
		"expected": "Goodbye cruel world!",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world'; }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers hash",
		"it": "providing a helpers hash",
		"template": "Goodbye {{#iter}}{{cruel}} {{world}}{{/iter}}!",
		"data": {
			"iter": [
				{
					"cruel": "cruel"
				}
			]
		},
		"expected": "Goodbye cruel world!",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world'; }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers hash",
		"it": "in cases of conflict, helpers win",
		"template": "{{{lookup}}}",
		"data": {
			"lookup": "Explicit"
		},
		"expected": "helpers",
		"helpers": {
			"lookup": {
				"!code": true,
				"javascript": "function () { return 'helpers'; }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers hash",
		"it": "in cases of conflict, helpers win",
		"template": "{{lookup}}",
		"data": {
			"lookup": "Explicit"
		},
		"expected": "helpers",
		"helpers": {
			"lookup": {
				"!code": true,
				"javascript": "function () { return 'helpers'; }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers hash",
		"it": "the helpers hash is available is nested contexts",
		"template": "{{#outer}}{{#inner}}{{helper}}{{/inner}}{{/outer}}",
		"data": {
			"outer": {
				"inner": {
					"unused": []
				}
			}
		},
		"expected": "helper",
		"helpers": {
			"helper": {
				"!code": true,
				"javascript": "function () { return 'helper'; }"
			}
		},
		"compileOptions": {}
	},
	{
		"description": "helpers hash",
		"it": "the helper hash should augment the global hash",
		"template": "{{test_helper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}",
		"data": {
			"cruel": "cruel"
		},
		"expected": "found it! Goodbye cruel world!!",
		"helpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"test_helper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "registration",
		"it": "unregisters",
		"template": "{{#form yehuda}}<p>{{name}}</p>{{#link}}Hello{{/link}}{{/form}}"
	},
	{
		"description": "registration",
		"it": "allows multiple globals",
		"template": "{{testHelper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}",
		"data": {
			"cruel": "cruel"
		},
		"expected": "found it! Goodbye cruel world!!",
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "registration",
		"it": "fails with multiple and args",
		"template": "{{#form yehuda}}<p>{{name}}</p>{{#link}}Hello{{/link}}{{/form}}",
		"exception": true,
		"message": "Arg not supported with multiple helpers"
	},
	{
		"description": "decimal number literals work",
		"it": "decimal number literals work",
		"template": "Message: {{hello -1.2 1.2}}",
		"data": {},
		"expected": "Message: Hello -1.2 1.2 times",
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (times, times2) {\n      if (typeof times !== 'number') { times = 'NaN'; }\n      if (typeof times2 !== 'number') { times2 = 'NaN'; }\n      return 'Hello ' + times + ' ' + times2 + ' times';\n    }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "negative number literals work",
		"it": "negative number literals work",
		"template": "Message: {{hello -12}}",
		"data": {},
		"expected": "Message: Hello -12 times",
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (times) {\n      if (typeof times !== 'number') { times = 'NaN'; }\n      return 'Hello ' + times + ' times';\n    }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "String literal parameters",
		"it": "simple literals work",
		"template": "Message: {{hello \"world\" 12 true false}}",
		"data": {},
		"expected": "Message: Hello world 12 times: true false",
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (param, times, bool1, bool2) {\n        if (typeof times !== 'number') { times = 'NaN'; }\n        if (typeof bool1 !== 'boolean') { bool1 = 'NaB'; }\n        if (typeof bool2 !== 'boolean') { bool2 = 'NaB'; }\n        return 'Hello ' + param + ' ' + times + ' times: ' + bool1 + ' ' + bool2;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "String literal parameters",
		"it": "using a quote in the middle of a parameter raises an error",
		"template": "Message: {{hello wo\"rld\"}}",
		"exception": true
	},
	{
		"description": "String literal parameters",
		"it": "escaping a String is possible",
		"template": "Message: {{{hello \"\\\"world\\\"\"}}}",
		"data": {},
		"expected": "Message: Hello \"world\"",
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (param) { return 'Hello ' + param; }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "String literal parameters",
		"it": "it works with ' marks",
		"template": "Message: {{{hello \"Alan's world\"}}}",
		"data": {},
		"expected": "Message: Hello Alan's world",
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (param) { return 'Hello ' + param; }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "negative number literals work",
		"it": "negative number literals work",
		"template": "Message: {{hello -12}}",
		"data": {},
		"expected": "Message: Hello -12 times",
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function (times) {\n      if (typeof times !== 'number') { times = 'NaN'; }\n      return 'Hello ' + times + ' times';\n    }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "multiple parameters",
		"it": "simple multi-params work",
		"template": "Message: {{goodbye cruel world}}",
		"data": {
			"cruel": "cruel",
			"world": "world"
		},
		"expected": "Message: Goodbye cruel world",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (cruel, world) { return 'Goodbye ' + cruel + ' ' + world; }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "multiple parameters",
		"it": "block multi-params work",
		"template": "Message: {{#goodbye cruel world}}{{greeting}} {{adj}} {{noun}}{{/goodbye}}",
		"data": {
			"cruel": "cruel",
			"world": "world"
		},
		"expected": "Message: Goodbye cruel world",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (cruel, world, options) {\n        return options.fn({greeting: 'Goodbye', adj: cruel, noun: world});\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "hash",
		"it": "helpers can take an optional hash",
		"template": "{{goodbye cruel=\"CRUEL\" world=\"WORLD\" times=12}}",
		"data": {},
		"expected": "GOODBYE CRUEL WORLD 12 TIMES",
		"message": "Helper output hash",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.hash.world + ' ' + options.hash.times + ' TIMES';\n        }"
			}
		}
	},
	{
		"description": "hash",
		"it": "helpers can take an optional hash with booleans",
		"template": "{{goodbye cruel=\"CRUEL\" world=\"WORLD\" print=true}}",
		"data": {},
		"expected": "GOODBYE CRUEL WORLD",
		"message": "Helper output hash",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          if (options.hash.print === true) {\n            return 'GOODBYE ' + options.hash.cruel + ' ' + options.hash.world;\n          } else if (options.hash.print === false) {\n            return 'NOT PRINTING';\n          } else {\n            return 'THIS SHOULD NOT HAPPEN';\n          }\n        }"
			}
		}
	},
	{
		"description": "hash",
		"it": "helpers can take an optional hash with booleans",
		"template": "{{goodbye cruel=\"CRUEL\" world=\"WORLD\" print=false}}",
		"data": {},
		"expected": "NOT PRINTING",
		"message": "Boolean helper parameter honored",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          if (options.hash.print === true) {\n            return 'GOODBYE ' + options.hash.cruel + ' ' + options.hash.world;\n          } else if (options.hash.print === false) {\n            return 'NOT PRINTING';\n          } else {\n            return 'THIS SHOULD NOT HAPPEN';\n          }\n        }"
			}
		}
	},
	{
		"description": "hash",
		"it": "block helpers can take an optional hash",
		"template": "{{#goodbye cruel=\"CRUEL\" times=12}}world{{/goodbye}}",
		"data": {},
		"expected": "GOODBYE CRUEL world 12 TIMES",
		"message": "Hash parameters output",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this) + ' ' + options.hash.times + ' TIMES';\n        }"
			}
		}
	},
	{
		"description": "hash",
		"it": "block helpers can take an optional hash with single quoted stings",
		"template": "{{#goodbye cruel=\"CRUEL\" times=12}}world{{/goodbye}}",
		"data": {},
		"expected": "GOODBYE CRUEL world 12 TIMES",
		"message": "Hash parameters output",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this) + ' ' + options.hash.times + ' TIMES';\n        }"
			}
		}
	},
	{
		"description": "hash",
		"it": "block helpers can take an optional hash with booleans",
		"template": "{{#goodbye cruel=\"CRUEL\" print=true}}world{{/goodbye}}",
		"data": {},
		"expected": "GOODBYE CRUEL world",
		"message": "Boolean hash parameter honored",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          if (options.hash.print === true) {\n            return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this);\n          } else if (options.hash.print === false) {\n            return 'NOT PRINTING';\n          } else {\n            return 'THIS SHOULD NOT HAPPEN';\n          }\n        }"
			}
		}
	},
	{
		"description": "hash",
		"it": "block helpers can take an optional hash with booleans",
		"template": "{{#goodbye cruel=\"CRUEL\" print=false}}world{{/goodbye}}",
		"data": {},
		"expected": "NOT PRINTING",
		"message": "Boolean hash parameter honored",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          if (options.hash.print === true) {\n            return 'GOODBYE ' + options.hash.cruel + ' ' + options.fn(this);\n          } else if (options.hash.print === false) {\n            return 'NOT PRINTING';\n          } else {\n            return 'THIS SHOULD NOT HAPPEN';\n          }\n        }"
			}
		}
	},
	{
		"description": "helperMissing",
		"it": "if a context is not found, helperMissing is used",
		"template": "{{hello}} {{link_to world}}",
		"exception": true,
		"message": "/Missing helper: \"link_to\"/"
	},
	{
		"description": "helperMissing",
		"it": "if a context is not found, custom helperMissing is used",
		"template": "{{hello}} {{link_to world}}",
		"data": {
			"hello": "Hello",
			"world": "world"
		},
		"expected": "Hello <a>world</a>",
		"helpers": {
			"helperMissing": {
				"!code": true,
				"javascript": "function (mesg, options) {\n          if (options.name === 'link_to') {\n            return new Handlebars.SafeString('<a>' + mesg + '</a>');\n          }\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "helperMissing",
		"it": "if a value is not found, custom helperMissing is used",
		"template": "{{hello}} {{link_to}}",
		"data": {
			"hello": "Hello",
			"world": "world"
		},
		"expected": "Hello <a>winning</a>",
		"helpers": {
			"helperMissing": {
				"!code": true,
				"javascript": "function (options) {\n          if (options.name === 'link_to') {\n            return new Handlebars.SafeString('<a>winning</a>');\n          }\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "knownHelpers",
		"it": "Known helper should render helper",
		"template": "{{hello}}",
		"data": {},
		"expected": "foo",
		"message": "'foo' should === 'foo",
		"compileOptions": {
			"knownHelpers": {
				"hello": true
			}
		},
		"helpers": {
			"hello": {
				"!code": true,
				"javascript": "function () { return 'foo'; }"
			}
		}
	},
	{
		"description": "knownHelpers",
		"it": "Unknown helper in knownHelpers only mode should be passed as undefined",
		"template": "{{typeof hello}}",
		"data": {},
		"expected": "undefined",
		"message": "'undefined' should === 'undefined",
		"compileOptions": {
			"knownHelpers": {
				"typeof": true
			},
			"knownHelpersOnly": true
		},
		"helpers": {
			"typeof": {
				"!code": true,
				"javascript": "function (arg) { return typeof arg; }"
			},
			"hello": {
				"!code": true,
				"javascript": "function () { return 'foo'; }"
			}
		}
	},
	{
		"description": "knownHelpers",
		"it": "Builtin helpers available in knownHelpers only mode",
		"template": "{{#unless foo}}bar{{/unless}}",
		"data": {},
		"expected": "bar",
		"message": "'bar' should === 'bar",
		"compileOptions": {
			"knownHelpersOnly": true
		}
	},
	{
		"description": "knownHelpers",
		"it": "Field lookup works in knownHelpers only mode",
		"template": "{{foo}}",
		"data": {
			"foo": "bar"
		},
		"expected": "bar",
		"message": "'bar' should === 'bar",
		"compileOptions": {
			"knownHelpersOnly": true
		}
	},
	{
		"description": "knownHelpers",
		"it": "Conditional blocks work in knownHelpers only mode",
		"template": "{{#foo}}bar{{/foo}}",
		"data": {
			"foo": "baz"
		},
		"expected": "bar",
		"message": "'bar' should === 'bar",
		"compileOptions": {
			"knownHelpersOnly": true
		}
	},
	{
		"description": "knownHelpers",
		"it": "Invert blocks work in knownHelpers only mode",
		"template": "{{^foo}}bar{{/foo}}",
		"data": {
			"foo": false
		},
		"expected": "bar",
		"message": "'bar' should === 'bar",
		"compileOptions": {
			"knownHelpersOnly": true
		}
	},
	{
		"description": "knownHelpers",
		"it": "Functions are bound to the context in knownHelpers only mode",
		"template": "{{foo}}",
		"data": {
			"foo": {
				"!code": true,
				"javascript": "function () { return this.bar; }"
			},
			"bar": "bar"
		},
		"expected": "bar",
		"message": "'bar' should === 'bar",
		"compileOptions": {
			"knownHelpersOnly": true
		}
	},
	{
		"description": "knownHelpers",
		"it": "Unknown helper call in knownHelpers only mode should throw",
		"template": "{{typeof hello}}",
		"exception": true
	},
	{
		"description": "blockHelperMissing",
		"it": "lambdas are resolved by blockHelperMissing, not handlebars proper",
		"template": "{{#truthy}}yep{{/truthy}}",
		"data": {
			"truthy": {
				"!code": true,
				"javascript": "function () { return true; }"
			}
		},
		"expected": "yep",
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "blockHelperMissing",
		"it": "lambdas resolved by blockHelperMissing are bound to the context",
		"template": "{{#truthy}}yep{{/truthy}}",
		"data": {
			"truthy": {
				"!code": true,
				"javascript": "function () { return this.truthiness(); }"
			},
			"truthiness": {
				"!code": true,
				"javascript": "function () { return false; }"
			}
		},
		"expected": "",
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include in ambiguous mustache calls",
		"template": "{{helper}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include in helper mustache calls",
		"template": "{{helper 1}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include in ambiguous block calls",
		"template": "{{#helper}}{{/helper}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include in simple block calls",
		"template": "{{#./helper}}{{/./helper}}",
		"data": {},
		"expected": "missing: ./helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include in helper block calls",
		"template": "{{#helper 1}}{{/helper}}",
		"data": {},
		"expected": "ran: helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include in known helper calls",
		"template": "{{helper}}",
		"data": {},
		"expected": "ran: helper",
		"compileOptions": {
			"knownHelpers": {
				"helper": true
			},
			"knownHelpersOnly": true
		},
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include full id",
		"template": "{{#foo.helper}}{{/foo.helper}}",
		"data": {
			"foo": {}
		},
		"expected": "missing: foo.helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name field",
		"it": "should include full id if a hash is passed",
		"template": "{{#foo.helper bar=baz}}{{/foo.helper}}",
		"data": {
			"foo": {}
		},
		"expected": "helper missing: foo.helper",
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () {\n        return 'helper missing: ' + arguments[arguments.length - 1].name;\n      }"
			},
			"helper": {
				"!code": true,
				"javascript": "function () {\n        return 'ran: ' + arguments[arguments.length - 1].name;\n      }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "name conflicts",
		"it": "helpers take precedence over same-named context properties",
		"template": "{{goodbye}} {{cruel world}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "GOODBYE cruel WORLD",
		"message": "Helper executed",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function () {\n          return this.goodbye.toUpperCase();\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }"
			}
		}
	},
	{
		"description": "name conflicts",
		"it": "helpers take precedence over same-named context properties$",
		"template": "{{#goodbye}} {{cruel world}}{{/goodbye}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "GOODBYE cruel WORLD",
		"message": "Helper executed",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return this.goodbye.toUpperCase() + options.fn(this);\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }"
			}
		}
	},
	{
		"description": "name conflicts",
		"it": "Scoped names take precedence over helpers",
		"template": "{{this.goodbye}} {{cruel world}} {{cruel this.goodbye}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "goodbye cruel WORLD cruel GOODBYE",
		"message": "Helper not executed",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function () {\n          return this.goodbye.toUpperCase();\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }"
			}
		}
	},
	{
		"description": "name conflicts",
		"it": "Scoped names take precedence over block helpers",
		"template": "{{#goodbye}} {{cruel world}}{{/goodbye}} {{this.goodbye}}",
		"data": {
			"goodbye": "goodbye",
			"world": "world"
		},
		"expected": "GOODBYE cruel WORLD goodbye",
		"message": "Helper executed",
		"helpers": {
			"goodbye": {
				"!code": true,
				"javascript": "function (options) {\n          return this.goodbye.toUpperCase() + options.fn(this);\n        }"
			},
			"cruel": {
				"!code": true,
				"javascript": "function (world) {\n          return 'cruel ' + world.toUpperCase();\n        }"
			}
		}
	},
	{
		"description": "block params",
		"it": "should take presedence over context values",
		"template": "{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{value}}",
		"data": {
			"value": "foo"
		},
		"expected": "1foo",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn({value: 'bar'}, {blockParams: [1, 2]});\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "block params",
		"it": "should take presedence over helper values",
		"template": "{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{value}}",
		"data": {},
		"expected": "1foo",
		"helpers": {
			"value": {
				"!code": true,
				"javascript": "function () {\n          return 'foo';\n        }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn({}, {blockParams: [1, 2]});\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "block params",
		"it": "should not take presedence over pathed values",
		"template": "{{#goodbyes as |value|}}{{./value}}{{/goodbyes}}{{value}}",
		"data": {
			"value": "bar"
		},
		"expected": "barfoo",
		"helpers": {
			"value": {
				"!code": true,
				"javascript": "function () {\n          return 'foo';\n        }"
			},
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn(this, {blockParams: [1, 2]});\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "block params",
		"it": "should take presednece over parent block params",
		"template": "{{#goodbyes as |value|}}{{#goodbyes}}{{value}}{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{/goodbyes}}{{/goodbyes}}{{value}}",
		"data": {
			"value": "foo"
		},
		"expected": "13foo",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          return options.fn({value: 'bar'}, {blockParams: options.fn.blockParams === 1 ? [value++, value++] : undefined});\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	},
	{
		"description": "block params",
		"it": "should allow block params on chained helpers",
		"template": "{{#if bar}}{{else goodbyes as |value|}}{{value}}{{/if}}{{value}}",
		"data": {
			"value": "foo"
		},
		"expected": "1foo",
		"helpers": {
			"goodbyes": {
				"!code": true,
				"javascript": "function (options) {\n          equals(options.fn.blockParams, 1);\n          return options.fn({value: 'bar'}, {blockParams: [1, 2]});\n        }"
			}
		},
		"compileOptions": {},
		"globalHelpers": {
			"world": {
				"!code": true,
				"javascript": "function () { return 'world!'; }"
			},
			"testHelper": {
				"!code": true,
				"javascript": "function () { return 'found it!'; }"
			}
		}
	}
]