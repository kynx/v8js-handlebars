[
	{
		"description": "track ids",
		"it": "should not include anything without the flag",
		"template": "{{wycats is.a slave.driver}}",
		"data": {},
		"helpers": {
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, noun, options) {\n        equal(options.ids, undefined);\n        equal(options.hashIds, undefined);\n\n        return 'success';\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should not include anything without the flag",
		"template": "{{wycats is.a slave.driver}}"
	},
	{
		"description": "track ids",
		"it": "should not include anything without the flag",
		"template": "{{wycats is.a slave.driver}}",
		"expected": "success"
	},
	{
		"description": "track ids",
		"it": "should include argument ids",
		"template": "{{wycats is.a slave.driver}}",
		"data": {
			"is": {
				"a": "foo"
			},
			"slave": {
				"driver": "bar"
			}
		},
		"expected": "is.a",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, noun, options) {\n        equal(options.ids[0], 'is.a');\n        equal(options.ids[1], 'slave.driver');\n\n        return 'HELP ME MY BOSS ' + options.ids[0] + ':' + passiveVoice + ' ' + options.ids[1] + ':' + noun;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should include argument ids",
		"template": "{{wycats is.a slave.driver}}",
		"expected": "slave.driver"
	},
	{
		"description": "track ids",
		"it": "should include argument ids",
		"template": "{{wycats is.a slave.driver}}",
		"expected": "HELP ME MY BOSS is.a:foo slave.driver:bar"
	},
	{
		"description": "track ids",
		"it": "should include hash ids",
		"template": "{{wycats bat=is.a baz=slave.driver}}",
		"data": {
			"is": {
				"a": "foo"
			},
			"slave": {
				"driver": "bar"
			}
		},
		"expected": "is.a",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"wycats": {
				"!code": true,
				"javascript": "function (options) {\n        equal(options.hashIds.bat, 'is.a');\n        equal(options.hashIds.baz, 'slave.driver');\n\n        return 'HELP ME MY BOSS ' + options.hashIds.bat + ':' + options.hash.bat + ' ' + options.hashIds.baz + ':' + options.hash.baz;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should include hash ids",
		"template": "{{wycats bat=is.a baz=slave.driver}}",
		"expected": "slave.driver"
	},
	{
		"description": "track ids",
		"it": "should include hash ids",
		"template": "{{wycats bat=is.a baz=slave.driver}}",
		"expected": "HELP ME MY BOSS is.a:foo slave.driver:bar"
	},
	{
		"description": "track ids",
		"it": "should note ../ and ./ references",
		"template": "{{wycats ./is.a ../slave.driver this.is.a this}}",
		"data": {
			"is": {
				"a": "foo"
			},
			"slave": {
				"driver": "bar"
			}
		},
		"expected": "is.a",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, noun, thiz, thiz2, options) {\n        equal(options.ids[0], 'is.a');\n        equal(options.ids[1], '../slave.driver');\n        equal(options.ids[2], 'is.a');\n        equal(options.ids[3], '');\n\n        return 'HELP ME MY BOSS ' + options.ids[0] + ':' + passiveVoice + ' ' + options.ids[1] + ':' + noun;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should note ../ and ./ references",
		"template": "{{wycats ./is.a ../slave.driver this.is.a this}}",
		"expected": "../slave.driver"
	},
	{
		"description": "track ids",
		"it": "should note ../ and ./ references",
		"template": "{{wycats ./is.a ../slave.driver this.is.a this}}",
		"expected": "is.a"
	},
	{
		"description": "track ids",
		"it": "should note ../ and ./ references",
		"template": "{{wycats ./is.a ../slave.driver this.is.a this}}",
		"expected": ""
	},
	{
		"description": "track ids",
		"it": "should note ../ and ./ references",
		"template": "{{wycats ./is.a ../slave.driver this.is.a this}}",
		"expected": "HELP ME MY BOSS is.a:foo ../slave.driver:undefined"
	},
	{
		"description": "track ids",
		"it": "should note @data references",
		"template": "{{wycats @is.a @slave.driver}}",
		"data": {},
		"expected": "@is.a",
		"options": {
			"data": {
				"is": {
					"a": "foo"
				},
				"slave": {
					"driver": "bar"
				}
			}
		},
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, noun, options) {\n        equal(options.ids[0], '@is.a');\n        equal(options.ids[1], '@slave.driver');\n\n        return 'HELP ME MY BOSS ' + options.ids[0] + ':' + passiveVoice + ' ' + options.ids[1] + ':' + noun;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should note @data references",
		"template": "{{wycats @is.a @slave.driver}}",
		"expected": "@slave.driver"
	},
	{
		"description": "track ids",
		"it": "should note @data references",
		"template": "{{wycats @is.a @slave.driver}}",
		"expected": "HELP ME MY BOSS @is.a:foo @slave.driver:bar"
	},
	{
		"description": "track ids",
		"it": "should return null for constants",
		"template": "{{wycats 1 \"foo\" key=false}}",
		"data": {
			"is": {
				"a": "foo"
			},
			"slave": {
				"driver": "bar"
			}
		},
		"expected": null,
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, noun, options) {\n        equal(options.ids[0], null);\n        equal(options.ids[1], null);\n        equal(options.hashIds.key, null);\n\n        return 'HELP ME MY BOSS ' + passiveVoice + ' ' + noun + ' ' + options.hash.key;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should return null for constants",
		"template": "{{wycats 1 \"foo\" key=false}}",
		"expected": null
	},
	{
		"description": "track ids",
		"it": "should return null for constants",
		"template": "{{wycats 1 \"foo\" key=false}}",
		"expected": null
	},
	{
		"description": "track ids",
		"it": "should return null for constants",
		"template": "{{wycats 1 \"foo\" key=false}}",
		"expected": "HELP ME MY BOSS 1 foo false"
	},
	{
		"description": "track ids",
		"it": "should return true for subexpressions",
		"template": "{{wycats (sub)}}",
		"data": {
			"is": {
				"a": "foo"
			},
			"slave": {
				"driver": "bar"
			}
		},
		"expected": true,
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"sub": {
				"!code": true,
				"javascript": "function () { return 1; }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, options) {\n        equal(options.ids[0], true);\n\n        return 'HELP ME MY BOSS ' + passiveVoice;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should return true for subexpressions",
		"template": "{{wycats (sub)}}",
		"expected": "HELP ME MY BOSS 1"
	},
	{
		"description": "track ids",
		"it": "should use block param paths",
		"template": "{{#doIt as |is|}}{{wycats is.a slave.driver is}}{{/doIt}}",
		"data": {
			"is": {
				"a": "foo"
			},
			"slave": {
				"driver": "bar"
			}
		},
		"expected": "zomg.a",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"doIt": {
				"!code": true,
				"javascript": "function (options) {\n        var blockParams = [this.is];\n        blockParams.path = ['zomg'];\n        return options.fn(this, {blockParams: blockParams});\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (passiveVoice, noun, blah, options) {\n        equal(options.ids[0], 'zomg.a');\n        equal(options.ids[1], 'slave.driver');\n        equal(options.ids[2], 'zomg');\n\n        return 'HELP ME MY BOSS ' + options.ids[0] + ':' + passiveVoice + ' ' + options.ids[1] + ':' + noun;\n      }"
			}
		}
	},
	{
		"description": "track ids",
		"it": "should use block param paths",
		"template": "{{#doIt as |is|}}{{wycats is.a slave.driver is}}{{/doIt}}",
		"expected": "slave.driver"
	},
	{
		"description": "track ids",
		"it": "should use block param paths",
		"template": "{{#doIt as |is|}}{{wycats is.a slave.driver is}}{{/doIt}}",
		"expected": "zomg"
	},
	{
		"description": "track ids",
		"it": "should use block param paths",
		"template": "{{#doIt as |is|}}{{wycats is.a slave.driver is}}{{/doIt}}",
		"expected": "HELP ME MY BOSS zomg.a:foo slave.driver:bar"
	},
	{
		"description": "#each",
		"it": "should track contextPath for arrays",
		"template": "{{#each array}}{{wycats name}}{{/each}}",
		"data": {
			"array": [
				{
					"name": "foo"
				},
				{
					"name": "bar"
				}
			]
		},
		"expected": "foo:array.0\nbar:array.1\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#each",
		"it": "should track contextPath for keys",
		"template": "{{#each object}}{{wycats name}}{{/each}}",
		"data": {
			"object": {
				"foo": {
					"name": "foo"
				},
				"bar": {
					"name": "bar"
				}
			}
		},
		"expected": "foo:object.foo\nbar:object.bar\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#each",
		"it": "should handle nesting",
		"template": "{{#each .}}{{#each .}}{{wycats name}}{{/each}}{{/each}}",
		"data": {
			"array": [
				{
					"name": "foo"
				},
				{
					"name": "bar"
				}
			]
		},
		"expected": "foo:.array..0\nbar:.array..1\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#each",
		"it": "should handle block params",
		"template": "{{#each array as |value|}}{{blockParams value.name}}{{/each}}",
		"data": {
			"array": [
				{
					"name": "foo"
				},
				{
					"name": "bar"
				}
			]
		},
		"expected": "foo:array.0.name\nbar:array.1.name\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#with",
		"it": "should track contextPath",
		"template": "{{#with field}}{{wycats name}}{{/with}}",
		"data": {
			"field": {
				"name": "foo"
			}
		},
		"expected": "foo:field\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#with",
		"it": "should handle nesting",
		"template": "{{#with bat}}{{#with field}}{{wycats name}}{{/with}}{{/with}}",
		"data": {
			"bat": {
				"field": {
					"name": "foo"
				}
			}
		},
		"expected": "foo:bat.field\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#blockHelperMissing",
		"it": "should track contextPath for arrays",
		"template": "{{#field}}{{wycats name}}{{/field}}",
		"data": {
			"field": [
				{
					"name": "foo"
				}
			]
		},
		"expected": "foo:field.0\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#blockHelperMissing",
		"it": "should track contextPath for keys",
		"template": "{{#field}}{{wycats name}}{{/field}}",
		"data": {
			"field": {
				"name": "foo"
			}
		},
		"expected": "foo:field\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "#blockHelperMissing",
		"it": "should handle nesting",
		"template": "{{#bat}}{{#field}}{{wycats name}}{{/field}}{{/bat}}",
		"data": {
			"bat": {
				"field": {
					"name": "foo"
				}
			}
		},
		"expected": "foo:bat.field\n",
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		}
	},
	{
		"description": "partials",
		"it": "should pass track id for basic partial",
		"template": "{{wycats name}}",
		"data": {
			"name": "Alan",
			"url": "http://alan"
		},
		"expected": "Dudes: Yehuda:dudes.0\nAlan:dudes.1\n",
		"options": {
			"data": {
				"root": {
					"dudes": [
						{
							"name": "Yehuda",
							"url": "http://yehuda"
						},
						{
							"name": "Alan",
							"url": "http://alan"
						}
					]
				},
				"_parent": {
					"root": {
						"dudes": [
							{
								"name": "Yehuda",
								"url": "http://yehuda"
							},
							{
								"name": "Alan",
								"url": "http://alan"
							}
						]
					}
				},
				"key": 1,
				"index": 1,
				"first": false,
				"last": true,
				"contextPath": "dudes.1"
			}
		},
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  }"
			},
			"each": {
				"!code": true,
				"javascript": "function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n\n    var fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data = undefined,\n        contextPath = undefined;\n\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      // Don't iterate over undefined values since we can't execute blocks against them\n      // in non-strict (js) mode.\n      if (context[field] == null) {\n        return;\n      }\n\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        var priorKey = undefined;\n\n        for (var key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () /* [args, ]options */{\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new _exception2['default']('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  }"
			},
			"if": {
				"!code": true,
				"javascript": "function (conditional, options) {\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  }"
			},
			"unless": {
				"!code": true,
				"javascript": "function (conditional, options) {\n    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });\n  }"
			},
			"log": {
				"!code": true,
				"javascript": "function () /* message, options */{\n    var args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (var i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    var level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log.apply(instance, args);\n  }"
			},
			"lookup": {
				"!code": true,
				"javascript": "function (obj, field) {\n    return obj && obj[field];\n  }"
			},
			"with": {
				"!code": true,
				"javascript": "function (context, options) {\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    var fn = options.fn;\n\n    if (!_utils.isEmpty(context)) {\n      var data = options.data;\n      if (options.data && options.ids) {\n        data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: _utils.blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  }"
			},
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		},
		"decorators": {
			"inline": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n    var ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function (context, options) {\n        // Create a new partials stack frame prior to exec.\n        var original = container.partials;\n        container.partials = _utils.extend({}, original, props.partials);\n        var ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  }"
			}
		}
	},
	{
		"description": "partials",
		"it": "should pass track id for context partial",
		"template": "{{#each this}}{{wycats name}}{{/each}}",
		"data": [
			{
				"name": "Yehuda",
				"url": "http://yehuda"
			},
			{
				"name": "Alan",
				"url": "http://alan"
			}
		],
		"expected": "Dudes: Yehuda:dudes..0\nAlan:dudes..1\n",
		"options": {
			"data": {
				"root": {
					"dudes": [
						{
							"name": "Yehuda",
							"url": "http://yehuda"
						},
						{
							"name": "Alan",
							"url": "http://alan"
						}
					]
				},
				"contextPath": "dudes"
			}
		},
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  }"
			},
			"each": {
				"!code": true,
				"javascript": "function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n\n    var fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data = undefined,\n        contextPath = undefined;\n\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      // Don't iterate over undefined values since we can't execute blocks against them\n      // in non-strict (js) mode.\n      if (context[field] == null) {\n        return;\n      }\n\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        var priorKey = undefined;\n\n        for (var key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () /* [args, ]options */{\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new _exception2['default']('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  }"
			},
			"if": {
				"!code": true,
				"javascript": "function (conditional, options) {\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  }"
			},
			"unless": {
				"!code": true,
				"javascript": "function (conditional, options) {\n    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });\n  }"
			},
			"log": {
				"!code": true,
				"javascript": "function () /* message, options */{\n    var args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (var i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    var level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log.apply(instance, args);\n  }"
			},
			"lookup": {
				"!code": true,
				"javascript": "function (obj, field) {\n    return obj && obj[field];\n  }"
			},
			"with": {
				"!code": true,
				"javascript": "function (context, options) {\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    var fn = options.fn;\n\n    if (!_utils.isEmpty(context)) {\n      var data = options.data;\n      if (options.data && options.ids) {\n        data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: _utils.blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  }"
			},
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		},
		"decorators": {
			"inline": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n    var ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function (context, options) {\n        // Create a new partials stack frame prior to exec.\n        var original = container.partials;\n        container.partials = _utils.extend({}, original, props.partials);\n        var ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  }"
			}
		}
	},
	{
		"description": "partials",
		"it": "should invalidate context for partials with parameters",
		"template": "{{wycats name}}",
		"data": {
			"name": "Alan",
			"url": "http://alan",
			"bar": "foo"
		},
		"expected": "Dudes: Yehuda:true\nAlan:true\n",
		"options": {
			"data": {
				"root": {
					"dudes": [
						{
							"name": "Yehuda",
							"url": "http://yehuda"
						},
						{
							"name": "Alan",
							"url": "http://alan"
						}
					]
				},
				"_parent": {
					"root": {
						"dudes": [
							{
								"name": "Yehuda",
								"url": "http://yehuda"
							},
							{
								"name": "Alan",
								"url": "http://alan"
							}
						]
					}
				},
				"key": 1,
				"index": 1,
				"first": false,
				"last": true,
				"contextPath": true
			}
		},
		"compileOptions": {
			"trackIds": true
		},
		"helpers": {
			"blockHelperMissing": {
				"!code": true,
				"javascript": "function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  }"
			},
			"each": {
				"!code": true,
				"javascript": "function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n\n    var fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data = undefined,\n        contextPath = undefined;\n\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      // Don't iterate over undefined values since we can't execute blocks against them\n      // in non-strict (js) mode.\n      if (context[field] == null) {\n        return;\n      }\n\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        var priorKey = undefined;\n\n        for (var key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  }"
			},
			"helperMissing": {
				"!code": true,
				"javascript": "function () /* [args, ]options */{\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new _exception2['default']('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  }"
			},
			"if": {
				"!code": true,
				"javascript": "function (conditional, options) {\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  }"
			},
			"unless": {
				"!code": true,
				"javascript": "function (conditional, options) {\n    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });\n  }"
			},
			"log": {
				"!code": true,
				"javascript": "function () /* message, options */{\n    var args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (var i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    var level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log.apply(instance, args);\n  }"
			},
			"lookup": {
				"!code": true,
				"javascript": "function (obj, field) {\n    return obj && obj[field];\n  }"
			},
			"with": {
				"!code": true,
				"javascript": "function (context, options) {\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    var fn = options.fn;\n\n    if (!_utils.isEmpty(context)) {\n      var data = options.data;\n      if (options.data && options.ids) {\n        data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: _utils.blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  }"
			},
			"blockParams": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.ids[0] + '\\n';\n      }"
			},
			"wycats": {
				"!code": true,
				"javascript": "function (name, options) {\n        return name + ':' + options.data.contextPath + '\\n';\n      }"
			}
		},
		"decorators": {
			"inline": {
				"!code": true,
				"javascript": "function (fn, props, container, options) {\n    var ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function (context, options) {\n        // Create a new partials stack frame prior to exec.\n        var original = container.partials;\n        container.partials = _utils.extend({}, original, props.partials);\n        var ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  }"
			}
		}
	}
]