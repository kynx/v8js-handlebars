{
    "block params-should allow block params on chained helpers-00": {
        "helpers": {
            "goodbyes": {
                "php": "function ($options) use(&$testCase) { $testCase->assertEquals(1, $options->fn->blockParams); return $options->fn(['value' => 'bar'], ['blockParams' => [1, 2]]); }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "block params-should not take presedence over pathed values-00": {
        "helpers": {
            "value": {
                "php": "function () { return 'foo'; }"
            },
            "goodbyes": {
                "php": "function ($options) use (&$testCase) { $testCase->assertEquals(1, $options->fn->blockParams); return $options->fn($this, ['blockParams' => [1, 2]]); }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "block params-should take presedence over context values-00": {
        "helpers": {
            "goodbyes": {
                "php": "function ($options) use (&$testCase) { $testCase->assertEquals(1, $options->fn->blockParams); return $options->fn(['value' => 'bar'], ['blockParams' => [1, 2]]); }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "block params-should take presedence over helper values-00": {
        "helpers": {
            "value": {
                "php": "function () { return 'foo'; }"
            },
            "goodbyes": {
                "php": "function ($options) use (&$testCase) { $testCase->assertEquals(1, $options->fn->blockParams); return $options->fn([], ['blockParams' => [1, 2]]); }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "block params-should take presednece over parent block params-00": {
        "helpers": {
            "goodbyes": {
                "javascript": "function (options) {\n          if( typeof value === 'undefined' ) { value = 1; } return options.fn({value: 'bar'}, {blockParams: options.fn.blockParams === 1 ? [value++, value++] : undefined});\n        }",
                "php": "function($options) {\n          static $value;\n          if( $value === null ) { $value = 1; } return $options->fn(array('value' => 'bar'), array('blockParams' => array($value++, $value++)));\n        }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "blockhelpermissing-lambdas are resolved by blockhelpermissing, not handlebars proper-00": {
        "data": {
            "truthy": {
                "php": "function () { return true; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "blockhelpermissing-lambdas resolved by blockhelpermissing are bound to the context-00": {
        "data": {
            "truthy": {
                "php": "function () { return $this->truthiness(); }"
            },
            "truthiness": {
                "php": "function () { return false; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "decimal number literals work-decimal number literals work-00": {
        "helpers": {
            "hello": {
                "php": "function ($times, $times2) { if (!is_float($times)) { $times = 'NaN'; }; if (!is_float($times2)) { $times2 = 'NaN'; }; return 'Hello ' . $times . ' ' . $times2 . ' times'; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "hash-block helpers can take an optional hash with booleans-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { if ($options->hash->print === true) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->fn($this); } elseif ($options->hash->print === false) { return 'NOT PRINTING'; } else { return 'THIS SHOULD NOT HAPPEN'; } }"
            }
        }
    },
    "hash-block helpers can take an optional hash with booleans-01": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { if ($options->hash->print === true) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->fn($this); } elseif ($options->hash->print === false) { return 'NOT PRINTING'; } else { return 'THIS SHOULD NOT HAPPEN'; } }"
            }
        }
    },
    "hash-block helpers can take an optional hash with single quoted stings-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->fn($this) . ' ' . $options->hash->times . ' TIMES'; }"
            }
        }
    },
    "hash-block helpers can take an optional hash-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->fn($this) . ' ' . $options->hash->times . ' TIMES'; }"
            }
        }
    },
    "hash-helpers can take an optional hash with booleans-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { if ($options->hash->print === true) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->hash->world; } elseif ($options->hash->print === false) { return 'NOT PRINTING'; } else { return 'THIS SHOULD NOT HAPPEN'; } }"
            }
        }
    },
    "hash-helpers can take an optional hash with booleans-01": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { if ($options->hash->print === true) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->hash->world; } elseif ($options->hash->print === false) { return 'NOT PRINTING'; } else { return 'THIS SHOULD NOT HAPPEN'; } }"
            }
        }
    },
    "hash-helpers can take an optional hash-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { return 'GOODBYE ' . $options->hash->cruel . ' ' . $options->hash->world . ' ' . $options->hash->times . ' TIMES'; }"
            }
        }
    },
    "helpermissing-if a context is not found, custom helpermissing is used-00": {
        "helpers": {
            "helperMissing": {
                "phpstub": "function (mesg, options) {\n          if (options.name === 'link_to') {\n            return new Handlebars.SafeString('<a>' + mesg + '<\/a>');\n          }\n        }"
            }
        },
        "globalHelpers": {
            "world": {
                "phpstub": "function () { return 'world!'; }"
            },
            "testHelper": {
                "phpstub": "function () { return 'found it!'; }"
            }
        }
    },
    "helpermissing-if a value is not found, custom helpermissing is used-00": {
        "helpers": {
            "helperMissing": {
                "phpstub": "function (options) {\n          if (options.name === 'link_to') {\n            return new Handlebars.SafeString('<a>winning<\/a>');\n          }\n        }"
            }
        },
        "globalHelpers": {
            "world": {
                "phpstub": "function () { return 'world!'; }"
            },
            "testHelper": {
                "phpstub": "function () { return 'found it!'; }"
            }
        }
    },
    "helpers hash-in cases of conflict, helpers win-00": {
        "helpers": {
            "lookup": {
                "php": "function () { return 'helpers'; }"
            }
        }
    },
    "helpers hash-in cases of conflict, helpers win-01": {
        "helpers": {
            "lookup": {
                "php": "function () { return 'helpers'; }"
            }
        }
    },
    "helpers hash-providing a helpers hash-00": {
        "helpers": {
            "world": {
                "php": "function () { return 'world'; }"
            }
        }
    },
    "helpers hash-providing a helpers hash-01": {
        "helpers": {
            "world": {
                "php": "function () { return 'world'; }"
            }
        }
    },
    "helpers hash-the helper hash should augment the global hash-00": {
        "helpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            }
        },
        "globalHelpers": {
            "test_helper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "helpers hash-the helpers hash is available is nested contexts-00": {
        "helpers": {
            "helper": {
                "php": "function () { return 'helper'; }"
            }
        }
    },
    "helpers-block helper inverted sections-00": {
        "helpers": {
            "list": {
                "php": "function ($context, $options) { if (count($context) > 0) { $out = '<ul>'; for ($i = 0; $i < count($context); $i++) { $out .= '<li>'; $out .= $options->fn($context[$i]); $out .= '<\/li>'; } $out .= '<\/ul>'; return $out; } else { return '<p>' . $options->inverse($this) . '<\/p>'; } }"
            }
        }
    },
    "helpers-block helper inverted sections-01": {
        "helpers": {
            "list": {
                "php": "function ($context, $options) { if (count($context) > 0) { $out = '<ul>'; for ($i = 0; $i < count($context); $i++) { $out .= '<li>'; $out .= $options->fn($context[$i]); $out .= '<\/li>'; } $out .= '<\/ul>'; return $out; } else { return '<p>' . $options->inverse($this) . '<\/p>'; } }"
            }
        }
    },
    "helpers-block helper inverted sections-02": {
        "helpers": {
            "list": {
                "php": "function ($context, $options) { if (count($context) > 0) { $out = '<ul>'; for ($i = 0; $i < count($context); $i++) { $out .= '<li>'; $out .= $options->fn($context[$i]); $out .= '<\/li>'; } $out .= '<\/ul>'; return $out; } else { return '<p>' . $options->inverse($this) . '<\/p>'; } }"
            }
        }
    },
    "helpers-block helper passing a complex path context-00": {
        "helpers": {
            "form": {
                "php": "function ($context, $options) { return '<form>' . $options->fn($context) . '<\/form>'; }"
            }
        }
    },
    "helpers-block helper passing a new context-00": {
        "helpers": {
            "form": {
                "php": "function ($context, $options) { return '<form>' . $options->fn($context) . '<\/form>'; }"
            }
        }
    },
    "helpers-block helper should have context in this-00": {
        "helpers": {
            "link": {
                "php": "function ($options) { return '<a href=\"\/people\/' . $this->id . '\">' . $options->fn($this) . '<\/a>'; }"
            }
        }
    },
    "helpers-block helper staying in the same context-00": {
        "helpers": {
            "form": {
                "php": "function ($options) { return '<form>' . $options->fn($this) . '<\/form>'; }"
            }
        }
    },
    "helpers-block helper-00": {
        "helpers": {
            "goodbyes": {
                "php": "function ($options) { return $options->fn(['text' => 'GOODBYE']); }"
            }
        }
    },
    "helpers-helper block with complex lookup expression-00": {
        "helpers": {
            "goodbyes": {
                "php": "function ($options) { $out = ''; $byes = ['Goodbye', 'goodbye', 'GOODBYE']; for ($i = 0, $j = count($byes); $i < $j; $i++) { $out .= $byes[$i] . ' ' . $options->fn([]) . '! '; } return $out; }"
            }
        }
    },
    "helpers-helper block with identical context-00": {
        "helpers": {
            "goodbyes": {
                "php": "function ($options) { $out = ''; $byes = ['Goodbye', 'goodbye', 'GOODBYE']; for ($i = 0, $j = count($byes); $i < $j; $i++) { $out .= $byes[$i] . ' ' . $options->fn($this) . '! '; } return $out; }"
            }
        }
    },
    "helpers-helper for nested raw block gets raw content-00": {
        "helpers": {
            "a": {
                "php": "function ($options) { return $options->fn(); }"
            }
        }
    },
    "helpers-helper for raw block gets parameters-00": {
        "helpers": {
            "raw": {
                "php": "function ($a, $b, $c, $options) { return $options->fn() . $a . $b . $c; }"
            }
        }
    },
    "helpers-helper for raw block gets raw content-00": {
        "helpers": {
            "raw": {
                "php": "function ($options) { return $options->fn(); }"
            }
        }
    },
    "helpers-helper returning undefined value-00": {
        "helpers": {
            "nothere": {
                "php": "function () {}"
            }
        }
    },
    "helpers-helper returning undefined value-01": {
        "helpers": {
            "nothere": {
                "php": "function () {}"
            }
        }
    },
    "helpers-helper with complex lookup and nested template in vm+compiler-00": {
        "helpers": {
            "link": {
                "php": "function ($prefix, $options) { return '<a href=\"' . $prefix . '\/' . $this->url . '\">' . $options->fn($this) . '<\/a>'; }"
            }
        }
    },
    "helpers-helper with complex lookup and nested template-00": {
        "helpers": {
            "link": {
                "php": "function ($prefix, $options) { return '<a href=\"' . $prefix . '\/' . $this->url . '\">' . $options->fn($this) . '<\/a>'; }"
            }
        }
    },
    "helpers-helper with complex lookup$-00": {
        "helpers": {
            "link": {
                "php": "function ($prefix) { return '<a href=\"' . $prefix . '\/' . $this->url . '\">' . $this->text . '<\/a>'; }"
            }
        }
    },
    "helpers-nested block helpers-00": {
        "helpers": {
            "link": {
                "php": "function ($options) { return '<a href=\"' . $this->name . '\">' . $options->fn($this) . '<\/a>'; }"
            },
            "form": {
                "php": "function ($context, $options) { return '<form>' . $options->fn($context) . '<\/form>'; }"
            }
        }
    },
    "helpers-pathed lambas with parameters-00": {
        "data": {
            "helper": {
                "!code": true,
                "javascript": "function() {\n        return 'winning';\n      }",
                "php": "function() { return 'winning'; }"
            },
            "hash": {
                "helper": {
                    "!code": true,
                    "javascript": "function() {\n        return 'winning';\n      }",
                    "php": "function() { return 'winning'; }"
                }
            }
        },
        "helpers": {
            ".\/helper": {
                "!code": true,
                "javascript": "function() {\n        return 'fail';\n      }",
                "php": "function() { return 'fail'; }"
            }
        }
    },
    "helpers-pathed lambas with parameters-01": {
        "data": {
            "helper": {
                "!code": true,
                "javascript": "function() {\n        return 'winning';\n      }",
                "php": "function() { return 'winning'; }"
            },
            "hash": {
                "helper": {
                    "!code": true,
                    "javascript": "function() {\n        return 'winning';\n      }",
                    "php": "function() { return 'winning'; }"
                }
            }
        },
        "helpers": {
            ".\/helper": {
                "!code": true,
                "javascript": "function() {\n        return 'fail';\n      }",
                "php": "function() { return 'fail'; }"
            }
        }
    },
    "knownhelpers-functions are bound to the context in knownhelpers only mode-00": {
        "data": {
            "foo": {
                "php": "function () { return $this->bar; }"
            }
        }
    },
    "knownhelpers-known helper should render helper-00": {
        "helpers": {
            "hello": {
                "php": "function () { return 'foo'; }"
            }
        }
    },
    "knownhelpers-unknown helper in knownhelpers only mode should be passed as undefined-00": {
        "helpers": {
            "typeof": {
                "php": "function($arg) { return $arg === null ? 'undefined' : gettype($arg); }"
            },
            "hello": {
                "phpstub": "function () { return 'foo'; }"
            }
        }
    },
    "multiple parameters-block multi-params work-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($cruel, $world, $options) { return $options->fn(['greeting' => 'Goodbye', 'adj' => $cruel, 'noun' => $world]); }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "multiple parameters-simple multi-params work-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($cruel, $world) { return 'Goodbye ' . $cruel . ' ' . $world; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name conflicts-helpers take precedence over same-named context properties$-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { return strtoupper($this->goodbye) . $options->fn($this); }"
            },
            "cruel": {
                "php": "function ($world) { return 'cruel ' . strtoupper($world); }"
            }
        }
    },
    "name conflicts-helpers take precedence over same-named context properties-00": {
        "helpers": {
            "goodbye": {
                "php": "function () { return strtoupper($this->goodbye); }"
            },
            "cruel": {
                "php": "function ($world) { return 'cruel ' . strtoupper($world); }"
            }
        }
    },
    "name conflicts-scoped names take precedence over block helpers-00": {
        "helpers": {
            "goodbye": {
                "php": "function ($options) { return strtoupper($this->goodbye) . $options->fn($this); }"
            },
            "cruel": {
                "php": "function ($world) { return 'cruel ' . strtoupper($world); }"
            }
        }
    },
    "name conflicts-scoped names take precedence over helpers-00": {
        "helpers": {
            "goodbye": {
                "php": "function () { return strtoupper($this->goodbye); }"
            },
            "cruel": {
                "php": "function ($world) { return 'cruel ' . strtoupper($world); }"
            }
        }
    },
    "name field-should include full id if a hash is passed-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name field-should include full id-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name field-should include in ambiguous block calls-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name field-should include in ambiguous mustache calls-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name field-should include in helper block calls-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name field-should include in helper mustache calls-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "name field-should include in known helper calls-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        }
    },
    "name field-should include in simple block calls-00": {
        "helpers": {
            "blockHelperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helperMissing": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'helper missing: ' . $arguments[count($arguments)-1]->name;\n      }"
            },
            "helper": {
                "php": "function() {\n        $arguments = func_get_args();\n        return 'ran: ' . $arguments[count($arguments)-1]->name;\n      }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "negative number literals work-negative number literals work-00": {
        "helpers": {
            "hello": {
                "php": "function ($times) { if (!is_int($times)) { $times = 'NaN'; } return 'Hello ' . $times . ' times'; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "negative number literals work-negative number literals work-01": {
        "helpers": {
            "hello": {
                "php": "function ($times) { if (!is_int($times)) { $times = 'NaN'; } return 'Hello ' . $times . ' times'; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "registration-allows multiple globals-00": {
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "string literal parameters-escaping a string is possible-00": {
        "helpers": {
            "hello": {
                "php": "function ($param) { return 'Hello ' . $param; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "string literal parameters-it works with ' marks-00": {
        "helpers": {
            "hello": {
                "php": "function ($param) { return 'Hello ' . $param; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "string literal parameters-simple literals work-00": {
        "helpers": {
            "hello": {
                "php": "function ($param, $times, $bool1, $bool2) { if (!is_int($times)) { $times = 'NaN'; } if (!is_bool($bool1)) { $bool1 = 'NaB'; } if (!is_bool($bool2)) { $bool2 = 'NaB'; } return 'Hello ' . $param . ' ' . $times . ' times: ' . $bool1 . ' ' . $bool2; }"
            }
        },
        "globalHelpers": {
            "world": {
                "php": "function () { return 'world!'; }"
            },
            "testHelper": {
                "php": "function () { return 'found it!'; }"
            }
        }
    },
    "registration-unregisters-00" : null
}
