{
    "subexpressions-arg-less helper-00": {
        "helpers": {
            "foo": {
                "phpstub": "function (val) {\n        return val + val;\n      }"
            },
            "bar": {
                "phpstub": "function () {\n        return 'LOL';\n      }"
            }
        }
    },
    "subexpressions-as hashes in string params mode-00": {
        "helpers": {
            "blog": {
                "phpstub": "function (options) {\n        equals(options.hashTypes.fun, 'SubExpression');\n        return 'val is ' + options.hash.fun;\n      }"
            },
            "bork": {
                "phpstub": "function () {\n        return 'BORK';\n      }"
            }
        }
    },
    "subexpressions-as hashes-00": {
        "helpers": {
            "blog": {
                "phpstub": "function (options) {\n        return 'val is ' + options.hash.fun;\n      }"
            },
            "equal": {
                "phpstub": "function (x, y) {\n        return x === y;\n      }"
            }
        }
    },
    "subexpressions-gh-800 : complex subexpressions-00": {
        "helpers": {
            "dash": {
                "phpstub": "function (a, b) {\n        return a + '-' + b;\n      }"
            },
            "concat": {
                "phpstub": "function (a, b) {\n        return a + b;\n      }"
            }
        }
    },
    "subexpressions-gh-800 : complex subexpressions-01": {
        "helpers": {
            "dash": {
                "phpstub": "function (a, b) {\n        return a + '-' + b;\n      }"
            },
            "concat": {
                "phpstub": "function (a, b) {\n        return a + b;\n      }"
            }
        }
    },
    "subexpressions-gh-800 : complex subexpressions-02": {
        "helpers": {
            "dash": {
                "phpstub": "function (a, b) {\n        return a + '-' + b;\n      }"
            },
            "concat": {
                "phpstub": "function (a, b) {\n        return a + b;\n      }"
            }
        }
    },
    "subexpressions-gh-800 : complex subexpressions-03": {
        "helpers": {
            "dash": {
                "phpstub": "function (a, b) {\n        return a + '-' + b;\n      }"
            },
            "concat": {
                "phpstub": "function (a, b) {\n        return a + b;\n      }"
            }
        }
    },
    "subexpressions-gh-800 : complex subexpressions-04": {
        "helpers": {
            "dash": {
                "phpstub": "function (a, b) {\n        return a + '-' + b;\n      }"
            },
            "concat": {
                "phpstub": "function (a, b) {\n        return a + b;\n      }"
            }
        }
    },
    "subexpressions-helper w args-00": {
        "helpers": {
            "blog": {
                "phpstub": "function (val) {\n        return 'val is ' + val;\n      }"
            },
            "equal": {
                "phpstub": "function (x, y) {\n        return x === y;\n      }"
            }
        }
    },
    "subexpressions-in string params mode,-00": {
        "helpers": {
            "snog": {
                "phpstub": "function (a, b, options) {\n        equals(a, 'foo');\n        equals(options.types.length, 2, 'string params for outer helper processed correctly');\n        equals(options.types[0], 'SubExpression', 'string params for outer helper processed correctly');\n        equals(options.types[1], 'PathExpression', 'string params for outer helper processed correctly');\n        return a + b;\n      }"
            },
            "blorg": {
                "phpstub": "function (a, options) {\n        equals(options.types.length, 1, 'string params for inner helper processed correctly');\n        equals(options.types[0], 'PathExpression', 'string params for inner helper processed correctly');\n        return a;\n      }"
            }
        },
        "expected": "fooyeah"
    },
    "subexpressions-in string params mode,-01": null,
    "subexpressions-in string params mode,-02": null,
    "subexpressions-in string params mode,-03": null,
    "subexpressions-in string params mode,-04": null,
    "subexpressions-in string params mode,-05": null,
    "subexpressions-in string params mode,-06": null,
    "subexpressions-mixed paths and helpers-00": {
        "helpers": {
            "blog": {
                "phpstub": "function (val, that, theOther) {\n        return 'val is ' + val + ', ' + that + ' and ' + theOther;\n      }"
            },
            "equal": {
                "phpstub": "function (x, y) {\n        return x === y;\n      }"
            }
        }
    },
    "subexpressions-multiple subexpressions in a hash with context-00": {
        "helpers": {
            "input": {
                "phpstub": "function (options) {\n        var hash = options.hash;\n        var ariaLabel = Handlebars.Utils.escapeExpression(hash['aria-label']);\n        var placeholder = Handlebars.Utils.escapeExpression(hash.placeholder);\n        return new Handlebars.SafeString('<input aria-label=\"' + ariaLabel + '\" placeholder=\"' + placeholder + '\" \/>');\n      }"
            },
            "t": {
                "phpstub": "function (defaultString) {\n        return new Handlebars.SafeString(defaultString);\n      }"
            }
        }
    },
    "subexpressions-multiple subexpressions in a hash-00": {
        "helpers": {
            "input": {
                "phpstub": "function (options) {\n        var hash = options.hash;\n        var ariaLabel = Handlebars.Utils.escapeExpression(hash['aria-label']);\n        var placeholder = Handlebars.Utils.escapeExpression(hash.placeholder);\n        return new Handlebars.SafeString('<input aria-label=\"' + ariaLabel + '\" placeholder=\"' + placeholder + '\" \/>');\n      }"
            },
            "t": {
                "phpstub": "function (defaultString) {\n        return new Handlebars.SafeString(defaultString);\n      }"
            }
        }
    },
    "subexpressions-provides each nested helper invocation its own options hash-00": {
        "helpers": {
            "equal": {
                "javascript": "function (x, y, options) {\n   if (typeof lastOptions == 'undefined') { lastOptions = null; }\n     if (!options || options === lastOptions) {\n          throw new Error('options hash was reused');\n        }\n        lastOptions = options;\n        return x === y;\n      }",
                "phpstub": "function (x, y, options) {\n   if (typeof lastOptions == 'undefined') { lastOptions = null; }\n     if (!options || options === lastOptions) {\n          throw new Error('options hash was reused');\n        }\n        lastOptions = options;\n        return x === y;\n      }"
            }
        }
    },
    "subexpressions-subexpression functions on the context-00": {
        "data": {
            "bar": {
                "phpstub": "function () {\n        return 'LOL';\n      }"
            }
        },
        "helpers": {
            "foo": {
                "phpstub": "function (val) {\n        return val + val;\n      }"
            }
        }
    },
    "subexpressions-subexpressions can't just be property lookups-00": {
        "helpers": {
            "foo": {
                "phpstub": "function (val) {\n        return val + val;\n      }"
            }
        }
    },
    "subexpressions-supports much nesting-00": {
        "helpers": {
            "blog": {
                "phpstub": "function (val) {\n        return 'val is ' + val;\n      }"
            },
            "equal": {
                "phpstub": "function (x, y) {\n        return x === y;\n      }"
            }
        }
    },
    "subexpressions-with hashes-00": {
        "helpers": {
            "blog": {
                "phpstub": "function (val) {\n        return 'val is ' + val;\n      }"
            },
            "equal": {
                "phpstub": "function (x, y) {\n        return x === y;\n      }"
            }
        }
    }
}
