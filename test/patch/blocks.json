{
    "decorators-should access parent variables-00": {
        "helpers": {
            "helper": {
                "php": "function ($options) { return $options->fn->run; }"
            }
        },
        "decorators": {
            "decorator": {
                "php": "function ($fn, $props, $container, $options) { $fn->run = $options->args; return $fn; }"
            }
        }
    },
    "decorators-should apply allow undefined return-00": {
        "helpers": {
            "helper": {
                "php": "function ($options) { return $options->fn() . $options->fn->run; }"
            }
        },
        "decorators": {
            "decorator": {
                "php": "function ($fn) {  $fn->run = 'cess'; }"
            }
        }
    },
    "decorators-should apply block decorators-00": {
        "helpers": {
            "helper": {
                "php": "function ($options) { return $options->fn->run; }"
            }
        },
        "decorators": {
            "decorator": {
                "php": "function ($fn, $props, $container, $options) { $fn->run = $options->fn(); return $fn; }"
            }
        }
    },
    "decorators-should apply multiple decorators-00": {
        "helpers": {
            "helper": {
                "php": "function ($options) { return $options->fn->run;  }"
            }
        },
        "decorators": {
            "decorator": {
                "php": "function ($fn, $props, $container, $options) { $fn->run = ($fn->run || '') . $options->fn();  return $fn; }"
            }
        }
    },
    "decorators-should apply mustache decorators-00": {
        "helpers": {
            "helper": {
                "php": "function ($options) { return $options->fn->run; }"
            }
        },
        "decorators": {
            "decorator": {
                "php": "function ($fn) { $fn->run = 'success'; return $fn; }"
            }
        }
    },
    "decorators-should fail when accessing variables from root-00": {
        "decorators": {
            "decorator": {
                "php": "function ($fn, $props, $container, $options) use(&$testCase) { $testCase->assertEmpty($options->args[0]);  $run = true; return $fn; }"
            }
        },
        "expected": "",
        "note": "spec tests that decorator sets 'run' variable to true - we just test that decorator is called and doesn't return 'fail'"
    },
    "decorators-should fail when accessing variables from root-01": null,
    "decorators-should support nested decorators-00": {
        "helpers": {
            "helper": {
                "php": "function ($options) { return $options->fn->run; }"
            }
        },
        "decorators": {
            "decorator": {
                "php": "function ($fn, $props, $container, $options) { $fn->run = $options->fn->nested . $options->fn(); return $fn; }"
            },
            "nested": {
                "php": "function ($fn, $props, $container, $options) { $props->nested = $options->fn(); }"
            }
        }
    },
    "decorators-should work with root program-00": {
        "decorators": {
            "decorator": {
                "php": "function ($fn, $props, $container, $options) use(&$testCase) { $testCase->assertEquals('success', $options->args[0]); $run = true; return $fn; }"
            }
        }
    },
    "decorators-should work with root program-01": null,
    "registration-unregisters-00": null,
    "registration-unregisters-01": null,
    "registration-fails with multiple and args-00": null,
    "registration-allows multiple globals-00": null,
    "registration-allows multiple globals-01": null,
    "registration-allows multiple globals-02": null,
    "registration-allows multiple globals-03": null,
    "inverted sections-chained inverted sections with mismatch-01": null
}
