{
    "data-data can be functions with params-00": {
        "options": {
            "data": {
                "hello": {
                    "php": "function ($arg) { return $arg; }"
                }
            }
        }
    },
    "data-data can be functions-00": {
        "options": {
            "data": {
                "hello": {
                    "php": "function () { return 'hello'; }"
                }
            }
        }
    },
    "data-data is inherited downstream-00": {
        "helpers": {
            "let": {
                "phpstub": "function (options) {\n        var frame = Handlebars.createFrame(options.data);\n        for (var prop in options.hash) {\n          if (prop in options.hash) {\n            frame[prop] = options.hash[prop];\n          }\n        }\n        return options.fn(this, {data: frame});\n      }"
            }
        }
    },
    "data-deep @foo triggers automatic top-level data-00": {
        "note" : "These helpers are the result of a call to Handlebars.createFrams()",
        "helpers": {
            "blockHelperMissing": null,
            "each": null,
            "helperMissing": null,
            "if": null,
            "unless": null,
            "log": null,
            "lookup": null,
            "with": null,
            "let": {
                "phpstub": "function (options) {\n      var frame = Handlebars.createFrame(options.data);\n\n      for (var prop in options.hash) {\n        if (prop in options.hash) {\n          frame[prop] = options.hash[prop];\n        }\n      }\n      return options.fn(this, { data: frame });\n    }"
            }
        }
    },
    "data-hash values can be looked up via @foo-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return 'Hello ' . $options->hash->noun; }"
            }
        }
    },
    "data-nested parameter data can be looked up via @foo.bar-00": {
        "helpers": {
            "hello": {
                "php": "function ($noun) { return 'Hello ' . $noun; }"
            }
        }
    },
    "data-nested parameter data does not fail with @world.bar-00": {
        "helpers": {
            "hello": {
                "php": "function ($noun) { return 'Hello ' . (is_null($noun) ? 'undefined' : $noun); }"
            }
        }
    },
    "data-parameter data can be looked up via @foo-00": {
        "helpers": {
            "hello": {
                "php": "function ($noun) { return 'Hello ' . $noun; }"
            }
        }
    },
    "data-passing in data to a compiled function that expects data - data is passed to with block helpers where children use ..-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return $options->data->accessData . ' ' . $options->fn(['exclaim' => '?']); }"
            },
            "world": {
                "php": "function ($thing, $options) { return $options->data->adjective . ' ' . $thing . ($this->exclaim ?: ''); }"
            }
        }
    },
    "data-passing in data to a compiled function that expects data - works with block helpers that use ..-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return $options->fn(['exclaim' => '?']); }"
            },
            "world": {
                "php": "function ($thing, $options) { return $options->data->adjective . ' ' . $thing . ($this->exclaim ?: ''); }"
            }
        }
    },
    "data-passing in data to a compiled function that expects data - works with block helpers-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return $options->fn($this); }"
            },
            "world": {
                "php": "function ($options) { return $options->data->adjective . ' world' . ($this->exclaim ? '!' : ''); }"
            }
        }
    },
    "data-passing in data to a compiled function that expects data - works with helpers and parameters-00": {
        "helpers": {
            "hello": {
                "php": "function ($noun, $options) { return $options->data->adjective . ' ' . $noun . ($this->exclaim ? '!' : ''); }"
            }
        }
    },
    "data-passing in data to a compiled function that expects data - works with helpers in partials-00": {
        "helpers": {
            "blockHelperMissing": null,
            "each": null,
            "helperMissing": null,
            "if": null,
            "unless": null,
            "log": null,
            "lookup": null,
            "with": null,
            "hello": {
                "phpstub": "function ($options) { return $options->data->adjective . ' ' . $this->noun; }"
            }
        },
        "decorators": {
            "inline": {
                "phpstub": "function ($fn, $props, $container, $options) { $ret = $fn; if (!$props->partials) { $props->partials = []; $ret = function ($context, $options) { /* Create a new partials stack frame prior to exec. */ $original = $container->partials; $container->partials = _utils.extend({}, original, props.partials);\n        var ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  }"
            }
        }
    },
    "data-passing in data to a compiled function that expects data - works with helpers-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return $options->data->adjective . ' ' . $this->noun; }"
            }
        }
    },
    "data-you can override inherited data when invoking a helper with depth-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return $options->fn(['exclaim' => '?'], [ 'data' => ['adjective' => 'sad'] ]); }"
            },
            "world": {
                "php": "function ($thing, $options) { return $options->data->adjective . ' ' . $thing . ($this->exclaim ?: ''); }"
            }
        }
    },
    "data-you can override inherited data when invoking a helper-00": {
        "helpers": {
            "hello": {
                "php": "function ($options) { return $options->fn(['exclaim' => '?', 'zomg' => 'world'], [ 'data' => ['adjective' => 'sad'] ]); }"
            },
            "world": {
                "php": "function ($thing, $options) { return $options->data->adjective . ' ' . $thing . ($this->exclaim ?: ''); }"
            }
        }
    },
    "nesting-the root context can be looked up via @root-00": {
        "helpers": {
            "helper": {
                "phpstub": "function (options) {\n            var frame = Handlebars.createFrame(options.data);\n            frame.depth = options.data.depth + 1;\n            return options.fn(this, {data: frame});\n          }"
            }
        }
    }
}
